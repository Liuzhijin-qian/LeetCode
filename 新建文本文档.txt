https://www.doc88.com/p-0324855231576.html
https://old-releases.ubuntu.com/releases/21.04/ubuntu-21.04-desktop-amd64.iso
https://www.cprogramming.com/gdb.html
class Solution {
public:

    //以下为递归思路
    // int rank = 0;//记录遍历到的最大深度。
    // int res = 0;//记录最大深度
    // int maxDepth(TreeNode* root) {
    //     traverse(root);
    //     return res;
    // }
    // void traverse(TreeNode* root){
    //     if(root == nullptr )  return ;
    //     rank ++;//进入下一层    
    //     //每进入一层，就要比较res和当前层数的大小。
    //     res = res > rank ? res : rank;
    //     traverse(root->left);
    //     traverse(root->right);
    //     rank--;//返回上一层

    // }


    //动态规划思路
    int maxDepth(TreeNode* root){
        if(root == nullptr)  return 0;//base case
        int left1 = maxDepth(root->left);//把左边的子树的最大深度算出来
        int right1 = maxDepth(root->right);//把右边的子树的最大深度算出来
        return (1 +( left1 > right1 ? left1 : right1));//左右子树的最大深度加上当前节点，就是最大深度。
    }


};


#include<stdio.h>//输出  0-N之间的素数
int main()
{
    int N = 0,flag = 1;;
    scanf("%d",&N);
    for(int i =2 ;i <= N;i++ ){
        
        for(int j = 2;j < i;j++){
            if(i % j == 0) {
                flag = 0;
                break;
            }
        }
        if(flag){
            printf("%d\n",i);
        }
        flag = 1;
    }
	return 0;
}


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return traverse(preorder,0,preorder.size() - 1,inorder,0,inorder.size() - 1);
    }

    TreeNode* traverse(vector<int> preorder,int preStar,int preEnd,vector<int> inorder,int inStar,int inEnd){
        if(preStar > preEnd)  return nullptr;//base case

        
        int index = 0;
        for(int i = inStar;i <= inEnd;i ++){
            if(inorder[i] == preorder[preStar]){
                index = i;
                break;
            }
        }

        TreeNode* root =  new TreeNode(preorder[preStar]);//创建节点

        //计算左子树的长度
        int length = index - inStar;

        root->left  = traverse(preorder,preStar + 1, preStar + length  ,inorder,  inStar , index - 1);   //递归构造左子树
        root->right = traverse(preorder,  preStar + length + 1,  preEnd,inorder,index + 1,inEnd);///递归构造右子树


        return root;
    }
};